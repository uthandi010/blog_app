{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport { useStore } from 'vuex'; // Import useStore to access Vuex\nimport SignIn from '../components/users/SignIn.vue';\nimport SignUp from '../components/users/SignUp.vue';\nconst routes = [{\n  path: '/sign-in',\n  name: 'SignIn',\n  component: SignIn\n}, {\n  path: '/sign-up',\n  name: 'SignUp',\n  component: SignUp\n}, {\n  path: '/',\n  name: 'BodyElement',\n  component: () => import('../components/BodyElement.vue')\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const store = useStore(); // Access the Vuex store\n  const userToken = store.state.auth.user_token; // Retrieve token from Vuex\n\n  if (userToken) {\n    // If the user is logged in and trying to access SignIn or SignUp, redirect to home\n    if (to.name === 'SignIn' || to.name === 'SignUp') {\n      return next({\n        name: 'BodyElement'\n      });\n    }\n  } else {\n    // If the user is not logged in and trying to access a protected route, redirect to SignIn\n    if (to.name !== 'SignIn' && to.name !== 'SignUp') {\n      return next({\n        name: 'SignIn'\n      });\n    }\n  }\n  next(); // Allow navigation\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","useStore","SignIn","SignUp","routes","path","name","component","router","history","beforeEach","to","from","next","store","userToken","state","auth","user_token"],"sources":["/Users/francium/app/frontend/src/routes/route.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport { useStore } from 'vuex'; // Import useStore to access Vuex\nimport SignIn from '../components/users/SignIn.vue';\nimport SignUp from '../components/users/SignUp.vue';\n\nconst routes = [\n    {\n        path: '/sign-in',\n        name: 'SignIn',\n        component: SignIn,\n    },\n    {\n        path: '/sign-up',\n        name: 'SignUp',\n        component: SignUp,\n    },\n    {\n        path: '/',\n        name: 'BodyElement',\n        component: () => import('../components/BodyElement.vue'),\n    },\n];\n\nconst router = createRouter({\n    history: createWebHistory(),\n    routes,\n});\n\nrouter.beforeEach((to, from, next) => {\n    const store = useStore(); // Access the Vuex store\n    const userToken = store.state.auth.user_token; // Retrieve token from Vuex\n\n    if (userToken) {\n        // If the user is logged in and trying to access SignIn or SignUp, redirect to home\n        if (to.name === 'SignIn' || to.name === 'SignUp') {\n            return next({ name: 'BodyElement' });\n        }\n    } else {\n        // If the user is not logged in and trying to access a protected route, redirect to SignIn\n        if (to.name !== 'SignIn' && to.name !== 'SignUp') {\n            return next({ name: 'SignIn' });\n        }\n    }\n\n    next(); // Allow navigation\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,SAASC,QAAQ,QAAQ,MAAM,CAAC,CAAC;AACjC,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAOC,MAAM,MAAM,gCAAgC;AAEnD,MAAMC,MAAM,GAAG,CACX;EACIC,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEL;AACf,CAAC,EACD;EACIG,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEJ;AACf,CAAC,EACD;EACIE,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,+BAA+B;AAC3D,CAAC,CACJ;AAED,MAAMC,MAAM,GAAGT,YAAY,CAAC;EACxBU,OAAO,EAAET,gBAAgB,CAAC,CAAC;EAC3BI;AACJ,CAAC,CAAC;AAEFI,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMC,KAAK,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1B,MAAMc,SAAS,GAAGD,KAAK,CAACE,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,CAAC;;EAE/C,IAAIH,SAAS,EAAE;IACX;IACA,IAAIJ,EAAE,CAACL,IAAI,KAAK,QAAQ,IAAIK,EAAE,CAACL,IAAI,KAAK,QAAQ,EAAE;MAC9C,OAAOO,IAAI,CAAC;QAAEP,IAAI,EAAE;MAAc,CAAC,CAAC;IACxC;EACJ,CAAC,MAAM;IACH;IACA,IAAIK,EAAE,CAACL,IAAI,KAAK,QAAQ,IAAIK,EAAE,CAACL,IAAI,KAAK,QAAQ,EAAE;MAC9C,OAAOO,IAAI,CAAC;QAAEP,IAAI,EAAE;MAAS,CAAC,CAAC;IACnC;EACJ;EAEAO,IAAI,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}